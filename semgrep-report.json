{"version":"1.128.0","results":[{"check_id":"dockerfile.security.missing-user-entrypoint.missing-user-entrypoint","path":"repo\\Docker\\Dockerfile","start":{"line":5,"col":1,"offset":94},"end":{"line":5,"col":56,"offset":149},"extra":{"message":"By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.","fix":"USER non-root\nENTRYPOINT [\"java\", \"-jar\", \"/employee-department.jar\"]","metadata":{"cwe":["CWE-269: Improper Privilege Management"],"category":"security","technology":["dockerfile"],"confidence":"MEDIUM","owasp":["A04:2021 - Insecure Design"],"references":["https://owasp.org/Top10/A04_2021-Insecure_Design"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/dockerfile.security.missing-user-entrypoint.missing-user-entrypoint","shortlink":"https://sg.run/k281"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","path":"repo\\k8s\\department-service.yaml","start":{"line":16,"col":11,"offset":281},"end":{"line":16,"col":15,"offset":285},"extra":{"message":"In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding a `securityContext` to your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks.","fix":"securityContext:\n            allowPrivilegeEscalation: false\n          name","metadata":{"cwe":["CWE-732: Incorrect Permission Assignment for Critical Resource"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"references":["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation","https://kubernetes.io/docs/tasks/configure-pod-container/security-context/","https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"],"category":"security","technology":["kubernetes"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext","shortlink":"https://sg.run/eleR"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"rules.java-security.java-spring-xss-responseentity","path":"repo\\src\\main\\java\\com\\ameya\\controller\\FeedbackController.java","start":{"line":16,"col":16,"offset":576},"end":{"line":16,"col":77,"offset":637},"extra":{"message":"Detected direct user input in HTTP response. Use HtmlUtils.htmlEscape(...) to sanitize.","fix":"ResponseEntity.ok(\"...\" + HtmlUtils.htmlEscape(feedback))","metadata":{"category":"security","cwe":"CWE-79","confidence":"HIGH"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"rules.java-security.java-command-injection","path":"repo\\src\\main\\java\\com\\ameya\\controller\\ServerController.java","start":{"line":23,"col":27,"offset":831},"end":{"line":23,"col":61,"offset":865},"extra":{"message":"Avoid using Runtime.exec() with user-controlled input (Command Injection)","metadata":{"cwe":"CWE-77","category":"security","technology":["java","spring"],"confidence":"HIGH"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"rules.java-security.java-sqli-inline-query","path":"repo\\src\\main\\java\\com\\ameya\\service\\EmployeeInfoBusinessService.java","start":{"line":46,"col":16,"offset":1892},"end":{"line":46,"col":153,"offset":2029},"extra":{"message":"SQL Injection in JdbcTemplate","metadata":{"cwe":"CWE-89","category":"security","technology":["java","spring"],"confidence":"HIGH"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"java.spring.security.audit.spring-sqli.spring-sqli","path":"repo\\src\\main\\java\\com\\ameya\\service\\EmployeeInfoBusinessService.java","start":{"line":46,"col":35,"offset":1911},"end":{"line":46,"col":107,"offset":1983},"extra":{"message":"Detected a string argument from a public method contract in a raw SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"category":"security","technology":["spring"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/java.spring.security.audit.spring-sqli.spring-sqli","shortlink":"https://sg.run/1Z3x"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"rules.java-security.java-sqli-statement","path":"repo\\src\\main\\java\\com\\ameya\\service\\VulnerableApp.java","start":{"line":10,"col":9,"offset":388},"end":{"line":10,"col":49,"offset":428},"extra":{"message":"Avoid using Statement; use PreparedStatement instead.","metadata":{},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"java.lang.security.audit.formatted-sql-string.formatted-sql-string","path":"repo\\src\\main\\java\\com\\ameya\\service\\VulnerableApp.java","start":{"line":11,"col":24,"offset":453},"end":{"line":11,"col":46,"offset":475},"extra":{"message":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"source-rule-url":"https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION","asvs":{"control_id":"5.3.5 Injection","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements","section":"V5: Validation, Sanitization and Encoding Verification Requirements","version":"4"},"references":["https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html","https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps","https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement"],"category":"security","technology":["java"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/java.lang.security.audit.formatted-sql-string.formatted-sql-string","shortlink":"https://sg.run/OPXp"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"terraform.aws.security.aws-ecr-mutable-image-tags.aws-ecr-mutable-image-tags","path":"repo\\terraform\\Main.tf","start":{"line":9,"col":1,"offset":126},"end":{"line":11,"col":2,"offset":199},"extra":{"message":"The ECR repository allows tag mutability. Image tags could be overwritten with compromised images. ECR images should be set to IMMUTABLE to prevent code injection through image mutation. This can be done by setting `image_tag_mutability` to IMMUTABLE.","metadata":{"category":"security","technology":["terraform","aws"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-345: Insufficient Verification of Data Authenticity"],"references":["https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ecr_repository#image_tag_mutability","https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"],"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/terraform.aws.security.aws-ecr-mutable-image-tags.aws-ecr-mutable-image-tags","shortlink":"https://sg.run/ZEeL"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}}],"errors":[{"code":3,"level":"warn","type":["PartialParsing",[{"path":"repo\\mvnw","start":{"line":86,"col":5,"offset":0},"end":{"line":86,"col":68,"offset":63}},{"path":"repo\\mvnw","start":{"line":121,"col":33,"offset":0},"end":{"line":121,"col":34,"offset":1}},{"path":"repo\\mvnw","start":{"line":131,"col":3,"offset":0},"end":{"line":131,"col":5,"offset":2}},{"path":"repo\\mvnw","start":{"line":132,"col":13,"offset":0},"end":{"line":132,"col":14,"offset":1}},{"path":"repo\\mvnw","start":{"line":133,"col":2,"offset":0},"end":{"line":133,"col":3,"offset":1}},{"path":"repo\\mvnw","start":{"line":187,"col":3,"offset":0},"end":{"line":187,"col":4,"offset":1}},{"path":"repo\\mvnw","start":{"line":188,"col":1,"offset":0},"end":{"line":188,"col":14,"offset":13}}]],"message":"Syntax error at line repo\\mvnw:86:\n `h=$(((h * 31 + $(LC_CTYPE=C printf %d \"'$char\")) % 4294967296))` was unexpected","path":"repo\\mvnw","spans":[{"file":"repo\\mvnw","start":{"line":86,"col":5,"offset":0},"end":{"line":86,"col":68,"offset":63}},{"file":"repo\\mvnw","start":{"line":121,"col":33,"offset":0},"end":{"line":121,"col":34,"offset":1}},{"file":"repo\\mvnw","start":{"line":131,"col":3,"offset":0},"end":{"line":131,"col":5,"offset":2}},{"file":"repo\\mvnw","start":{"line":132,"col":13,"offset":0},"end":{"line":132,"col":14,"offset":1}},{"file":"repo\\mvnw","start":{"line":133,"col":2,"offset":0},"end":{"line":133,"col":3,"offset":1}},{"file":"repo\\mvnw","start":{"line":187,"col":3,"offset":0},"end":{"line":187,"col":4,"offset":1}},{"file":"repo\\mvnw","start":{"line":188,"col":1,"offset":0},"end":{"line":188,"col":14,"offset":13}}]},{"code":3,"level":"warn","type":"Syntax error","message":"Syntax error at line repo\\semgrep-report.json:1:\n missing element","path":"repo\\semgrep-report.json"}],"paths":{"scanned":["repo\\.gitattributes","repo\\.github\\workflows\\deploy.yml","repo\\.gitignore","repo\\.mvn\\wrapper\\maven-wrapper.properties","repo\\.scannerwork\\.sonar_lock","repo\\.scannerwork\\report-task.txt","repo\\.semgrep\\sql-injection-autofix.yml","repo\\buildspec.yml","repo\\Docker\\Dockerfile","repo\\Jenkinsfile","repo\\k8s\\department-service.yaml","repo\\logs\\snyk-fix-log-20250715.txt","repo\\mvnw","repo\\mvnw.cmd","repo\\pom.xml","repo\\Readme.MD","repo\\semgrep-report.json","repo\\snyk-report.json","repo\\sonar-project.properties","repo\\src\\main\\java\\com\\ameya\\controller\\EmployeeController.java","repo\\src\\main\\java\\com\\ameya\\controller\\FeedbackController.java","repo\\src\\main\\java\\com\\ameya\\controller\\ServerController.java","repo\\src\\main\\java\\com\\ameya\\EmployeeDepartmentApplication.java","repo\\src\\main\\java\\com\\ameya\\entity\\Department.java","repo\\src\\main\\java\\com\\ameya\\entity\\Employee.java","repo\\src\\main\\java\\com\\ameya\\repository\\DepartmentRepository.java","repo\\src\\main\\java\\com\\ameya\\repository\\EmployeeRepository.java","repo\\src\\main\\java\\com\\ameya\\service\\EmployeeInfoBusinessService.java","repo\\src\\main\\java\\com\\ameya\\service\\VulnerableApp.java","repo\\src\\main\\resources\\application.properties","repo\\src\\main\\resources\\application.yml","repo\\terraform\\Main.tf","repo\\terraform\\outputs.tf","repo\\terraform\\variables.tf"]},"time":{"rules":[],"rules_parse_time":1.6271471977233887,"profiling_times":{"config_time":10.325654745101929,"core_time":2.7598514556884766,"ignores_time":0.0010330677032470703,"total_time":13.08743143081665},"parsing_time":{"total_time":0.10411453247070312,"per_file_time":{"mean":0.005205726623535156,"std_dev":0.00025166061519939833},"very_slow_files":[]},"targets":[],"total_bytes":0,"max_memory_bytes":817662528},"skipped_rules":[]}
