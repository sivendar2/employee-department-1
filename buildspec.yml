version: 0.2

env:
  variables:
    AWS_REGION: us-east-1
    ECR_REPO: 779846797240.dkr.ecr.us-east-1.amazonaws.com/employee-department1
    IMAGE_TAG: latest
    EXECUTION_ROLE_ARN: arn:aws:iam::779846797240:role/ecsTaskExecutionRole
    LOG_GROUP: /ecs/employee-department1
    SONAR_PROJECT_KEY: employee-department-1cd
    SONAR_HOST_URL: http://sonarqube.sivendar.click:9000

  secrets-manager:
    SONAR_TOKEN: sonar_token  # Assumes SONAR_TOKEN stored in AWS Secrets Manager

phases:
  install:
    runtime-versions:
      java: corretto17
      docker: 20
    commands:
      - echo Installing dependencies...

  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO
      
      - echo Running SonarQube analysis...
      - >
        mvn verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
        -Dsonar.projectKey=$SONAR_PROJECT_KEY
        -Dsonar.host.url=$SONAR_HOST_URL
        -Dsonar.login=$SONAR_TOKEN || echo "SonarQube scan skipped (optional for build failure tolerance)"

  build:
    commands:
      - echo Building the project...
      - mvn clean package -DskipTests
      - echo Building Docker image...
      - docker build -t employee-department1 -f Docker/Dockerfile .
      - docker tag employee-department1:latest $ECR_REPO:$IMAGE_TAG
      - docker push $ECR_REPO:$IMAGE_TAG

  post_build:
    commands:
      - echo Registering ECS Task Definition...
      - |
        cat <<EOF > taskdef.json
        {
          "family": "employee-taskdef",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "512",
          "memory": "1024",
          "executionRoleArn": "$EXECUTION_ROLE_ARN",
          "containerDefinitions": [
            {
              "name": "employee-department1",
              "image": "$ECR_REPO:$IMAGE_TAG",
              "portMappings": [
                {
                  "containerPort": 8080,
                  "protocol": "tcp"
                }
              ],
              "essential": true,
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "$LOG_GROUP",
                  "awslogs-region": "$AWS_REGION",
                  "awslogs-stream-prefix": "ecs"
                }
              }
            }
          ]
        }
        EOF

      - echo Creating CloudWatch Log Group if not exists...
      - aws logs create-log-group --log-group-name "$LOG_GROUP" --region $AWS_REGION || echo "Log group already exists"

      - echo Registering task definition...
      - aws ecs register-task-definition --cli-input-json file://taskdef.json --region $AWS_REGION

      - echo Updating ECS service...
      - |
        SERVICE_STATUS=$(aws ecs describe-services --cluster employee-cluster1 --services employee-service --region $AWS_REGION \
                          --query 'services[0].status' --output text)
        if [[ "$SERVICE_STATUS" == "ACTIVE" ]]; then
          aws ecs update-service --cluster employee-cluster1 --service employee-service --force-new-deployment --region $AWS_REGION
        else
          aws ecs create-service \
            --cluster employee-cluster1 \
            --service-name employee-service \
            --task-definition employee-taskdef \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-0c06c9ba80675ca5b],securityGroups=[sg-03992897fd20860bd],assignPublicIp=ENABLED}" \
            --region $AWS_REGION
        fi

artifacts:
  files:
    - taskdef.json
